{"version":3,"sources":["services/httpService.js","components/tableView.jsx","components/moreInfo.jsx","components/dailyWeatherReport.jsx","App.js","serviceWorker.js","index.js"],"names":["city","a","url","axios","get","promise","data","getDailyWeatherReport","getWeeklyWeatherReport","TableView","props","useState","tableData","setTableData","filter","setFilterData","useEffect","map","item","index","date","min","getCelcius","max","filterData","reduce","acc","indexOf","push","className","onChange","target","filterValue","value","console","log","id","key","scope","style","cursor","onClick","sortedData","sort","item1","item2","temp","Math","floor","MoreInfo","display","left","window","location","reload","flexDirection","wind","speed","deg","pressure","humidity","DailyWeatherReport","getDate","time","Date","state","isMoreInfo","weeklyData","this","Fragment","country","src","getIcon","temp_min","temp_max","description","setState","maxWidth","margin","marginTop","weeklyMinTempData","weeklyMaxTempData","weeklyMinMaxTempData","Component","App","undefined","sunrise","sunset","weeklyReport","getWeatherReport","getWeeklyReport","http","weatherReport","name","main","sys","weather","daily","d","setUTCSeconds","dt","getFullYear","getMonth","React","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc02d690.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport async function getDailyWeatherReport(city) {\n    let url = \"http://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&appid=f4ef851a6555a81863dba178a852fc80\";\n    return await axios.get(url);\n}\n\nexport async function getWeeklyWeatherReport(city) {\n    let url = \"https://api.openweathermap.org/data/2.5/onecall?lat=18.5196&lon=73.8553&appid=f4ef851a6555a81863dba178a852fc80\";\n    let promise = await axios.get(url);\n    return promise.data;\n}\n\nexport default {\n    getDailyWeatherReport,\n    getWeeklyWeatherReport\n}","import React, { useEffect, useState } from 'react';\n\nconst TableView = (props) => {\n    const [tableData, setTableData] = useState([])\n    const [filter, setFilterData] = useState([])\n\n    useEffect(() => {\n        // setTableData(props.data)\n        const tableData = props.data.map((item, index) => {\n            return {\n                date: item.date,\n                min: getCelcius(item.min),\n                max: getCelcius(item.max)\n            }\n        })\n        setTableData(tableData);\n        const filterData = tableData.reduce((acc, item) => {\n            if (acc.indexOf(item.min) < 0) {\n                acc.push(item.min)\n            }\n            return acc;\n        }, [])\n        setFilterData(filterData)\n\n    }, [props])\n\n    let onSort = () => {\n        const sortedData = tableData.sort((item1, item2) => {\n            return item2.max - item1.max\n        })\n        setTableData([...sortedData])\n    }\n\n    let handleFilter = ({ target }) => {\n        const tableData = props.data.map((item, index) => {\n            return {\n                date: item.date,\n                min: getCelcius(item.min),\n                max: getCelcius(item.max)\n            }\n        })\n        setTableData(tableData);\n        let filterValue = target.value;\n        if (filterValue) {\n            const filterData = tableData.filter(item => {\n                console.log(item.min)\n                return item.min == filterValue;\n            })\n            setTableData([...filterData])\n        } else {\n            const tableData = props.data.map((item, index) => {\n                return {\n                    date: item.date,\n                    min: getCelcius(item.min),\n                    max: getCelcius(item.max)\n                }\n            })\n            setTableData(tableData);\n        }\n\n    }\n\n    return (\n        <div>\n            <div className=\"form-group m-2\">\n                <label>Filter by mininmum temperaturet</label>\n                <select onChange={handleFilter} className=\"form-control\" id=\"exampleFormControlSelect1\">\n                    <option></option>\n                    {filter.map(item => {\n                        return <option key={item} value={item}>{item}</option>\n                    })}\n                </select>\n            </div>\n\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">date</th>\n                        <th scope=\"col\">Min temp</th>\n                        <th scope=\"col\" style={{ cursor: \"pointer\" }} onClick={onSort}><a className=\"sort-by\">Max temp</a></th>\n                    </tr>\n                </thead>\n                <tbody>\n\n                    {tableData.map((item, index) => {\n                        return <tr key={index}>\n                            <th scope=\"row\">{index + 1}</th>\n                            <td>{item.date}</td>\n                            <td>{item.min}</td>\n                            <td>{item.max}</td>\n                        </tr>\n                    })}\n\n\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default TableView;\n\nlet getCelcius = (temp) => {\n    return Math.floor(temp - 273.15)\n}","import React from 'react';\n\nfunction MoreInfo(props) {\n    return <div>\n        <button className=\"btn btn-secondary btn-sm ml-2\" style={{ display: \"block\", left: 0 }} onClick={() => {\n            window.location.reload()\n        }}>Back</button>\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <div>\n                Wind Speed: <span className=\"badge badge-primary\">{props.wind.speed}</span>\n                Wind Deg: <span className=\"badge badge-primary\">{props.wind.deg}</span>\n            </div>\n            <diV>\n                pressure :  <span className=\"badge badge-secondary\">{props.pressure}</span>\n            </diV>\n\n            <div>\n                Humidity :  <span className=\"badge badge-success\">{props.humidity}</span>\n            </div>\n\n\n        </div>\n    </div>\n}\nexport default MoreInfo;","import React, { Component } from 'react';\nimport TableView from \"./tableView\"\nimport { LineChart } from 'react-chartkick';\nimport 'chart.js'\nimport MoreInfo from './moreInfo';\nclass DailyWeatherReport extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            isMoreInfo: false,\n            weeklyData: {}\n        }\n    }\n    async componentDidMount() {\n\n    }\n    getCelcius = (temp) => {\n        return Math.floor(temp - 273.15)\n    }\n    getDate = (time) => {\n        let dt = new Date(time)\n    }\n    render() {\n        if (this.state.isMoreInfo) {\n            return <MoreInfo {...this.props} />\n        }\n        return (\n            <React.Fragment>\n                <div className=\"container\">\n                    <div className=\"cards\">\n                        <h3> City : {this.props.city}, {this.props.country} </h3>\n                        {getIcon(this.props.id)}\n                        <h1 className=\"py-2\">{this.getCelcius(this.props.temp)}&deg; </h1>\n                        {minmaxTemp(this.getCelcius(this.props.temp_min), this.getCelcius(this.props.temp_max))}\n                        <h4 className=\"py-3\"> {this.props.description}</h4>\n                    </div>\n                    <button className=\"btn btn-primary\" onClick={() => {\n                        this.setState({ isMoreInfo: true })\n                    }}>More</button>\n                    <button className=\"btn btn-primary ml-2\" onClick={() => {\n                        this.setState({ isMoreInfo: true })\n                    }}>Graph view</button>\n                </div>\n                <div style={{ maxWidth: \"400px\", margin: \"auto\", marginTop: \"42px\" }}>\n                    <LineChart data={[{ \"name\": \"Minimum Temp\", \"data\": { ...this.props.weeklyMinTempData } },\n                    { \"name\": \"Minimum Temp\", \"data\": { ...this.props.weeklyMaxTempData } }]} />\n                </div>\n                <div style={{ maxWidth: \"400px\", margin: \"auto\", marginTop: \"42px\" }}>\n                    {this.props.weeklyMinMaxTempData && <TableView data={this.props.weeklyMinMaxTempData} />}\n                </div>\n            </React.Fragment >\n        );\n    }\n}\n\nexport default DailyWeatherReport;\n\nfunction minmaxTemp(min, max) {\n    return (\n        <h3>\n            <span className=\"px-4\">{min}&deg;</span>\n            <span className=\"px-4\">{max}&deg;</span>\n        </h3>\n    )\n}\n\nfunction getIcon(id) {\n    switch (true) {\n        case id >= 200 && id <= 232:\n            return <img src=\"http://openweathermap.org/img/wn/11d@4x.png\" />\n            break;\n        case id >= 500 && id <= 531:\n            return <img src=\"http://openweathermap.org/img/wn/09d@4x.png\" />\n            break;\n        case id >= 600 && id <= 622:\n            return <img src=\"http://openweathermap.org/img/wn/10d@4x.png\" />\n            break;\n        case id >= 801 && id <= 804:\n            return <img src=\"http://openweathermap.org/img/wn/02d@4x.png\" />\n            break;\n        default:\n            return <img src=\"http://openweathermap.org/img/wn/01d@4x.png\" />\n    }\n}","import React from 'react';\nimport './App.css';\nimport http from \"./services/httpService\";\nimport DailyWeatherReport from \"./components/dailyWeatherReport\";\n\nconst API_KEY = \"f4ef851a6555a81863dba178a852fc80\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      wind: undefined,\n      temp: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      humidity: undefined,\n      pressure: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      city: undefined,\n      weeklyReport: undefined\n    }\n\n    this.getWeatherReport();\n    this.getWeeklyReport();\n\n  }\n  async getWeatherReport() {\n    const weatherReport = await http.getDailyWeatherReport('Pune');\n    const { wind, name: city } = weatherReport.data;\n    const { temp, temp_max, temp_min, humidity, pressure } = weatherReport.data.main\n    const { sunrise, sunset, country } = weatherReport.data.sys;\n    const { description, id } = weatherReport.data.weather[0];\n    this.setState({ description, id, city, country, wind, temp, temp_max, temp_min, humidity, pressure, sunrise, sunset })\n  }\n\n  async getWeeklyReport() {\n    const weeklyReport = await http.getWeeklyWeatherReport('Pune');\n    const weeklyMaxTempData = weeklyReport.daily.reduce((acc, item) => {\n      var d = new Date(0);\n      d.setUTCSeconds(item.dt);\n      let date = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + d.getDate()\n      let temp_max = item.temp.max;\n      acc[date] = temp_max;\n      return acc;\n    }, {})\n    const weeklyMinTempData = weeklyReport.daily.reduce((acc, item) => {\n      var d = new Date(0);\n      d.setUTCSeconds(item.dt);\n      let date = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + d.getDate()\n      let temp_min = item.temp.min;\n      acc[date] = temp_min;\n      return acc;\n    }, {})\n\n    const weeklyMinMaxTempData = weeklyReport.daily.reduce((acc, item) => {\n      var d = new Date(0);\n      d.setUTCSeconds(item.dt);\n      let date = d.getFullYear() + \"-\" + (d.getMonth() + 1) + \"-\" + d.getDate()\n      let temp_min = item.temp.min;\n      let temp_max = item.temp.max;\n      acc.push({\n        date: date,\n        max: temp_max,\n        min: temp_min\n      })\n      return acc;\n    }, [])\n    this.setState({ weeklyMinTempData, weeklyMaxTempData, weeklyMinMaxTempData })\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> Weather App </h1>\n        <DailyWeatherReport {...this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\"\n\nReactDOM.render(\n  <React.StrictMode >\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}